{"version":3,"sources":["Components/Data.jsx","Components/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["Data","Fragment","className","this","props","data","title","date","src","hdurl","alt","explanation","Component","Header","id","onClick","displayInfo","showMe","App","state","info","setState","console","log","handleChange","event","target","value","handleSubmit","e","fetch","then","res","json","randomImage","year","Math","ceil","random","month","day","type","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2OAmCeA,E,uKA9BX,OACE,kBAAC,IAAMC,SAAP,KACA,yBAAKC,UAAU,oBACb,yBAAKA,UAAU,sBACb,wBACEA,UAAU,cAAcC,KAAKC,MAAMC,KAAKC,OAE1C,4BACGH,KAAKC,MAAMC,KAAKE,OAGrB,yBAAKL,UAAU,sBACb,yBACEM,IAAKL,KAAKC,MAAMC,KAAKI,MACrBP,UAAU,aACVQ,IAAKP,KAAKC,MAAMC,KAAKC,SAGzB,yBAAKJ,UAAU,qBACb,uBACEA,UAAU,UAAUC,KAAKC,MAAMC,KAAKM,oB,GAtB7BC,aC4BJC,E,uKA3BX,OACE,kBAAC,IAAMZ,SAAP,KACE,yBAAKC,UAAU,kBACb,uDACA,wBACEY,GAAG,YACHC,QAASZ,KAAKC,MAAMY,aAFtB,iBAKA,yBAAKd,UAAWC,KAAKC,MAAMa,OAAS,cAAgB,oBAClD,kWAME,6BANF,iB,GAZSL,aCkFNM,G,kNA7EbC,MAAQ,CACNC,MAAM,EACNb,KAAM,GACNF,KAAM,I,EAGRW,YAAc,WACZ,EAAKK,SAAS,CACZD,MAAO,EAAKD,MAAMC,OAEpBE,QAAQC,IAAI,EAAKJ,MAAMC,O,EAGzBI,aAAe,SAACC,GACd,EAAKJ,SAAL,eACGI,EAAMC,OAAOZ,GAAKW,EAAMC,OAAOC,S,EAKpCC,aAAe,SAACC,GACdC,MAAM,4CAAD,OAA6C,EAAKX,MAAMZ,KAAxD,8DACJwB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAA1B,GACJ,EAAKgB,SAAS,CAAEhB,a,EAKpB6B,YAAc,WACZ,IAAIC,EAAOC,KAAKC,KAAK,GAAAD,KAAKE,SAA2B,MACjDC,EAAQH,KAAKC,KAAK,GAAAD,KAAKE,SAAsB,GAC7CE,EAAMJ,KAAKC,KAAK,GAAAD,KAAKE,SAAsB,GAE3CC,EAAQ,KACVA,EAAK,WAAOA,IAEVC,EAAM,KACRA,EAAG,WAAOA,IAGZ,EAAKnB,SAAS,CACZd,KAAK,GAAD,OAAK4B,EAAL,YAAaI,EAAb,YAAsBC,IAAQ,EAAKZ,e,uDAKzC,OACE,kBAAC,IAAM3B,SAAP,KACE,kBAAC,EAAD,CACEe,YAAab,KAAKa,YAClBC,OAAQd,KAAKgB,MAAMC,OAErB,yBAAKlB,UAAU,kBACb,2BACEuC,KAAK,OACL3B,GAAG,OACH4B,SAAUvC,KAAKqB,eACjB,2BACEiB,KAAK,SACL3B,GAAG,SACHa,MAAM,KACNZ,QAASZ,KAAKyB,eAChB,4BACE1B,UAAU,gBACVa,QAASZ,KAAK+B,aAFhB,iBAMF,kBAAC,EAAD,CACE7B,KAAMF,KAAKgB,MAAMd,Y,GAvETO,cCME+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,a","file":"static/js/main.02c56cc6.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Data extends Component {\n  render () {\n    return (\n      <React.Fragment>\n      <div className='data-contain-all'>\n        <div className='data-title-contain'>\n          <h1\n            className='data-title'>{this.props.data.title}\n          </h1>\n          <h3>\n            {this.props.data.date}\n          </h3>\n        </div>\n        <div className='data-image-contain'>\n          <img\n            src={this.props.data.hdurl}\n            className='data-image'\n            alt={this.props.data.title}>\n          </img>\n        </div>\n        <div className='data-info-contain'>\n          <p\n            className='data-p'>{this.props.data.explanation}\n          </p>\n        </div>\n      </div>\n      </React.Fragment>\n    )\n  }\n}\n\n\nexport default Data;\n","import React, { Component } from 'react';\n\nclass Header extends Component {\n  render () {\n    return (\n      <React.Fragment>\n        <div className='header-contain'>\n          <h1>NASA Daily Image Search</h1>\n          <h2\n            id='more-info'\n            onClick={this.props.displayInfo}>\n            What is this?\n          </h2>\n          <div className={this.props.showMe ? 'how-to-info' : 'how-to-info-hide'}>\n            <p>\n              Select a date between June 20th, 1995 (06-20-1995) and todays date then hit the GO button.\n              (To get today's date, just click the calendar adn hit today!) This will generate a unique image from that date and also provide an explanation telling you whats going on.\n\n              Hit the random button to, you guessed it, grab a random image!\n\n              <br/>Enjoy!\n            </p>\n          </div>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\n\n\nexport default Header;\n","// IMPORTS //\nimport React, { Component } from 'react';\nimport Data from './Components/Data.jsx';\nimport Header from './Components/Header.jsx'\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    info: false,\n    date: '',\n    data: []\n  };\n\n  displayInfo = () => {\n    this.setState({\n      info: !this.state.info\n    })\n    console.log(this.state.info)\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.id]: event.target.value\n    })\n  }\n\n\n  handleSubmit = (e) => {\n    fetch(`https://api.nasa.gov/planetary/apod?date=${this.state.date}&hd=true&api_key=w1yWNsstPdbQ72g5P3hBytvj4ZnsnPA83YRwYy0Q`)\n    .then(res => res.json())\n    .then(data => {\n      this.setState({ data })\n    })\n\n  };\n\n  randomImage = () => {\n    let year = Math.ceil(Math.random() * (2020 - 1995) + 1995);\n    let month = Math.ceil(Math.random() * (12 - 1) + 1);\n    let day = Math.ceil(Math.random() * (31 - 1) + 1);\n\n    if (month < 10) {\n      month = `0${month}`;\n    }\n    if (day < 10) {\n      day = `0${day}`;\n    }\n\n    this.setState({\n      date: `${year}-${month}-${day}`}, this.handleSubmit);\n  }\n\n\n  render () {\n    return (\n      <React.Fragment>\n        <Header\n          displayInfo={this.displayInfo}\n          showMe={this.state.info}\n        />\n        <div className='search-contain'>\n          <input\n            type='date'\n            id='date'\n            onChange={this.handleChange}/>\n          <input\n            type='submit'\n            id='submit'\n            value='GO'\n            onClick={this.handleSubmit}/>\n          <button\n            className='random-button'\n            onClick={this.randomImage}>\n            Random Image\n          </button>\n        </div>\n        <Data\n          data={this.state.data}\n         />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}